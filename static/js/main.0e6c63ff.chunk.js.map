{"version":3,"sources":["App.js","store/action/todo.js","store/action/actionTypes.js","serviceWorker.js","store/reducer/reducer.js","index.js"],"names":["connect","state","sub","arr","dispatch","onSubmit","value","type","actionTypes","onDelete","props","useState","setvalues","hello","map","id","key","className","onClick","e","preventDefault","placeholder","onChange","event","target","Boolean","window","location","hostname","match","initialState","reducer","action","concat","filter","x","i","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4PAgCA,IAYeA,eAZO,SAAAC,GACpB,MAAM,CACJC,IAAID,EAAME,QAGS,SAAAC,GACrB,MAAM,CACJC,SAAS,SAACC,GAAD,OAASF,ECpCL,SAACE,GACd,MAAM,CACFC,KCLS,MDMTD,MAAMA,GDiCiBE,CAAgBF,KAC3CG,SAAS,SAACH,GAAD,OAASF,EC9BD,SAACE,GAClB,MAAO,CACHC,KCXY,SDYZD,MAAMA,GD2BiBE,CAAoBF,QAIpCN,EAvCf,SAAaU,GAAQ,IAAD,EACMC,mBAAS,IADf,mBACXL,EADW,KACLM,EADK,KAYdC,EAAMH,EAAMR,IAAIY,KAAI,SAACR,EAAMS,GACjC,OAAO,uBAAGC,IAAKD,EAAIE,UAAU,iBAAkBC,QAAS,kBANvC,SAACZ,GAEdI,EAAMD,SAASH,GAIyCG,CAASM,KAA9D,UAAsET,MAG3E,OACE,yBAAKW,UAAU,iBACb,yCACA,0BAAMZ,SAhBY,SAACc,GACrBA,EAAEC,iBACNV,EAAML,SAASC,KAef,2BAAOC,KAAK,OAAOU,UAAU,aAAaI,YAAY,sBAAsBC,SAAU,SAACC,GAASX,EAAUW,EAAMC,OAAOlB,UACvH,4BAAQC,KAAK,SAASU,UAAU,eAAhC,QAEMJ,MGhBcY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WChBAC,EAAa,CACd3B,IAAI,IAoBM4B,EAjBD,WAA8B,IAA7B9B,EAA4B,uDAAtB6B,EAAaE,EAAS,uCAEvC,OAAOA,EAAOzB,MACV,IFTS,MEUL,MAAM,CACFJ,IAAIF,EAAME,IAAI8B,OAAOD,EAAO1B,QAEpC,IFZY,SEaZ,MAAM,CACFH,IAAIF,EAAME,IAAI+B,QAAO,SAACC,EAAEC,GAAH,OAAOA,IAAIJ,EAAO1B,UAEvC,QAAS,MAAM,CACXH,IAAIF,EAAME,OCVpBkC,EAAMC,YAAYP,GAExBQ,IAASC,OACP,kBAAC,IAAD,CAAUH,MAAOA,GAClB,kBAAC,IAAMI,WAAP,KACG,kBAAC,EAAD,QAIFC,SAASC,eAAe,SFkHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0e6c63ff.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport {connect} from 'react-redux';\nimport './App.css';\nimport * as actionTypes from './store/action/todo';\n\nfunction App(props) {\n  const [value,setvalues]=useState('');\n  \n  const onSubmitHandler=(e)=>{\n    e.preventDefault();\nprops.onSubmit(value);\n  }\n  const onDelete=(value)=>{\n\n    props.onDelete(value);\n\n  }\nconst hello=props.sub.map((value,id)=>{\nreturn <p key={id} className=\"main_paragraph\"  onClick={()=>onDelete(id)}>â€¢ {value}</p>\n})\n  \n  return (\n    <div className=\"main_todolist\">\n      <h1>Todo List</h1>\n      <form onSubmit={onSubmitHandler}>\n<input type=\"text\" className=\"main_input\" placeholder=\"i.e meeting at 5 PM\" onChange={(event)=>{setvalues(event.target.value)}}></input>\n<button type=\"submit\" className=\"main_button\">Add</button>\n      </form>\n     {hello}\n    </div>\n  );\n}\nconst mapStateToProsp=state=>{\n  return{\n    sub:state.arr\n  }\n}\nconst mapDispatchProps=dispatch=>{\n  return{\n    onSubmit:(value)=>dispatch(actionTypes.add(value)),\n    onDelete:(value)=>dispatch(actionTypes.deleted(value))\n  }\n}\n\nexport default connect(mapStateToProsp,mapDispatchProps)(App);\n","import * as actionTypes from './actionTypes';\r\n\r\n\r\nexport const add=(value)=>{\r\n    return{\r\n        type:actionTypes.ADD,\r\n        value:value\r\n    }\r\n}\r\n\r\nexport const deleted=(value)=>{\r\n    return {\r\n        type:actionTypes.DELETE,\r\n        value:value\r\n    }\r\n}","export const ADD='ADD';\r\nexport const DELETE='DELETE';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as actiontypes from '../action/actionTypes';\r\n\r\nconst initialState={\r\n     arr:[]\r\n}\r\n\r\nconst reducer=(state=initialState,action)=>{\r\n\r\n    switch(action.type){\r\n        case (actiontypes.ADD):\r\n            return{\r\n                arr:state.arr.concat(action.value)\r\n            }\r\n        case(actiontypes.DELETE):\r\n        return{\r\n            arr:state.arr.filter((x,i)=>i!==action.value)\r\n        }    \r\n            default: return{\r\n                arr:state.arr\r\n            }\r\n    }\r\n\r\n}\r\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore} from 'redux';\nimport {Provider} from 'react-redux';\nimport reducer from './store/reducer/reducer.js'\nconst store=createStore(reducer);\n\nReactDOM.render(\n  <Provider store={store}>\n <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  </Provider>\n ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}